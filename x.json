{
  "name": "utils",
  "description": "Utility components for ChiÏ‡",
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/utils.git"
  },
  "dependencies": {
    "inquiry": "0.x.x",
    "JSONPath": "0.x.x",
    "glob": "3.x.x",
    "xml2json": "0.x.x",
    "csv": "0.x.x",
    "iffi": "0.x.x",
    "json-path": "0.x.x",
    "xml2js": "0.x.x"
  },
  "nodes": [
    {
      "ports": {
        "input": {
          "msg": {
            "type": "any",
            "title": "Log message",
            "description": "Logs a message to the console",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "type": "any",
            "title": "Log message"
          }
        }
      },
      "phrases": {
        "active": "Logging to console"
      },
      "async": true,
      "description": "Console log",
      "ns": "console",
      "name": "log",
      "fn": "on.input.msg = function() {\n  console.log(data);\n  output( { out: data });\n}\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "type": "any",
            "title": "Input",
            "async": true
          },
          "from": {
            "enum": [
              "ascii",
              "utf8",
              "ucs2",
              "base64",
              "binary",
              "hex"
            ],
            "type": "string",
            "title": "From",
            "default": "utf8"
          },
          "to": {
            "enum": [
              "ascii",
              "utf8",
              "ucs2",
              "base64",
              "binary",
              "hex"
            ],
            "type": "string",
            "title": "To",
            "default": "utf8"
          }
        },
        "output": {
          "out": {
            "type": "any",
            "title": "Output"
          }
        }
      },
      "require": {
        "buffer": "internal"
      },
      "phrases": {
        "active": "Converting from {{input.from}} to {{input.to}}"
      },
      "async": true,
      "description": "Convert ascii, utf8, ucs2, base64, binary or hex",
      "ns": "utils",
      "name": "converter",
      "fn": "on.input.in = function() {\n  var d = new buffer.Buffer(data, input.from);\n  output( { out: d.toString(input.to) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "type": "string",
            "title": "CSV",
            "async": true,
            "description": "A Comma Seperated Values document",
            "required": true
          }
        },
        "output": {
          "out": {
            "type": "array",
            "title": "Output",
            "description": "An array of records"
          }
        }
      },
      "phrases": {
        "active": "Parsing CSV"
      },
      "require": {
        "csv": "0.x.x"
      },
      "description": "NodeCSV Parser",
      "async": true,
      "title": "CSV",
      "ns": "utils",
      "name": "csv",
      "fn": "on.input.in = function() {\n\n  csv().\n  from.\n  string(data, {}).\n  to.\n  array(function(data) {\n    output({ out: data });\n  });\n\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "type": "any",
            "title": "Input"
          }
        },
        "output": {
          "out": {
            "type": "any",
            "title": "Output"
          }
        }
      },
      "phrases": {
        "active": "Dummy"
      },
      "description": "Takes an input and passes it to output.",
      "title": "Dummy",
      "ns": "utils",
      "name": "dummy",
      "fn": "output.out = input. in\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "type": "string",
            "title": "Program String",
            "description": "e.g. `cat *.js bad_file | wc -l`"
          },
          "data": {
            "type": "string",
            "title": "Data For StdIn",
            "description": "Optional data to be send to stdin, the process executed must be set to expect stdin",
            "default": null
          },
          "encoding": {
            "type": "string",
            "title": "Encoding",
            "default": "utf-8"
          },
          "timeout": {
            "type": "number",
            "title": "Encoding",
            "default": 0
          },
          "maxBuffer": {
            "type": "number",
            "title": "Buffer Maximum",
            "default": 204800
          },
          "killSignal": {
            "type": "string",
            "title": "Kill Signal",
            "default": "SIGTERM"
          },
          "cwd": {
            "type": "string",
            "title": "Current working dir",
            "default": null
          },
          "env": {
            "type": "string",
            "title": "Env",
            "default": null
          }
        },
        "output": {
          "out": {
            "title": "Std Out",
            "type": "string"
          },
          "flushed": {
            "title": "Flushed",
            "type": "boolean"
          },
          "error": {
            "title": "Error",
            "type": "object"
          }
        }
      },
      "require": {
        "child_process": "builtin"
      },
      "phrases": {
        "active": "Executing {{input.in}}"
      },
      "description": "Execute a program",
      "ns": "utils",
      "name": "exec",
      "fn": "output = function (cb) {\n\n  var child = child_process.exec(input['in'],\n    function (error, stdout, stderr) {\n\n      if(stderr) {\n        cb({\n          error: stderr\n        });\n      } else if (error) {\n        cb({\n          error: error\n        });\n      } else {\n        cb({\n          out: stdout\n        });\n      }\n\n      done();\n    }, {\n      encoding: input.encoding,\n      maxBuffer: input.maxBuffer,\n      killSignal: input.killSignal,\n      cwd: input.cwd,\n      env: input.env\n    });\n\n  child.on('error', function(err) {\n    cb({ error: err });\n  });\n\n  if (input.data) {\n    child.stdin.end(input.data, input.encoding, function () {\n      cb({\n        flushed: true\n      });\n    });\n  }\n\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "type": "any",
            "async": true,
            "title": "Function Input"
          },
          "fn": {
            "type": "function",
            "args": [
              "data",
              "output"
            ],
            "title": "Function Body"
          }
        },
        "output": {
          "out": {
            "title": "Std Out",
            "type": "string"
          },
          "error": {
            "title": "Error",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Executing Function "
      },
      "description": "Execute a function",
      "async": true,
      "ns": "utils",
      "name": "function",
      "fn": "on.input.in = function() {\n  input.fn(data, output);\n}\n"
    },
    {
      "ports": {
        "input": {
          "match": {
            "type": "string",
            "title": "Pattern",
            "description": "Pattern to be matched",
            "required": true
          }
        },
        "output": {
          "error": {
            "type": "event",
            "title": "Error",
            "description": "Emitted when an unexpected error is encountered, or whenever any fs error occurs if `options.strict` is set."
          },
          "matches": {
            "type": "array",
            "title": "Matches",
            "description": "Filenames found matching the pattern"
          },
          "end": {
            "type": "event",
            "title": "End",
            "description": "When the matching is finished, this is emitted with all the matches found. If the `nonull` option is set, and no match was found, then the `matches` list contains the original pattern. The matches are sorted, unless the `nosort` flag is set."
          },
          "match": {
            "type": "event",
            "title": "Match",
            "description": "Every time a match is found, this is emitted with the matched."
          },
          "xmatch": {
            "type": "event",
            "title": "Xmatch",
            "description": "Used for transmitting the groupID."
          },
          "abort": {
            "type": "event",
            "title": "Abort",
            "description": "When `abort()` is called, this event is raised."
          }
        }
      },
      "phrases": {
        "active": "Globbing with pattern: {{input.pattern}}"
      },
      "expose": [
        "chi"
      ],
      "require": {
        "glob": "3.x.x"
      },
      "description": "Match files using the patterns the shell uses, like stars and stuff.",
      "title": "Glob",
      "ns": "fs",
      "name": "glob",
      "fn": "output = function (cb) {\n\n  var g = chi.group('xmatch', cb);\n\n  var mg = new glob.Glob(input.match, {}, function (err, matches) {\n\n    cb({\n      matches: matches\n    });\n\n    g.done();\n\n    done();\n\n  });\n\n  mg.on('match', function (match) {\n\n    cb({\n      match: match\n    }, g.item());\n\n  });\n\n  mg.on('error', function (err) {\n\n    cb({\n      error: err\n    });\n\n  });\n\n  mg.on('abort', function () {\n\n    cb({\n      abort: null\n    });\n\n  });\n\n}\n"
    },
    {
      "ports": {
        "input": {},
        "output": {
          "hello": {
            "type": "string",
            "title": "Hello World",
            "description": "Provides Hello to the world",
            "readonly": true
          }
        }
      },
      "phrases": {
        "active": "Hello World from phrases.active!"
      },
      "description": "Hello World!",
      "ns": "world",
      "name": "hello",
      "fn": "output = {\n  hello: 'Hello World!'\n}\n"
    },
    {
      "ports": {
        "input": {
          "value": {
            "type": "any",
            "title": "Value"
          },
          "in": {
            "type": "string",
            "title": "IF statement",
            "description": "Any if statement, the input is available as `in`. e.g. in.required === true, providing the input object has a property `required`, compilation failures will go to the error port. The input value will be passed either to the Yes or No port."
          }
        },
        "output": {
          "error": {
            "type": "object",
            "title": "Error",
            "description": "Error"
          },
          "yes": {
            "type": "any",
            "title": "Yes"
          },
          "no": {
            "type": "any",
            "title": "No"
          }
        }
      },
      "phrases": {
        "active": "Deciding IF"
      },
      "require": {
        "iffi": "0.x.x"
      },
      "description": "Accepts a value on one port and checks it against an if statement.",
      "title": "IF",
      "ns": "utils",
      "name": "if",
      "fn": "try {\n  if (iffi(input['in'], {\n    value: input.value\n  })) {\n    output = {\n      yes: input.value\n    };\n  } else {\n    output = {\n      no: input.value\n    };\n  }\n} catch (e) {\n  output = {\n    error: e\n  };\n}\n"
    },
    {
      "ports": {
        "input": {
          "value": {
            "type": "any",
            "title": "Input Value",
            "description": "The value to be checked"
          },
          "compare": {
            "type": "any",
            "title": "Comparant Value"
          },
          "in": {
            "type": "string",
            "title": "IF statement",
            "description": "Any if statement, the input is available as `in`. e.g. in.required === true, providing the input object has a property `required`, compilation failures will go to the output port."
          }
        },
        "output": {
          "error": {
            "type": "object",
            "title": "Error",
            "description": "Error"
          },
          "yes": {
            "type": "boolean",
            "title": "Yes"
          },
          "no": {
            "type": "boolean",
            "title": "No"
          }
        }
      },
      "phrases": {
        "active": "Deciding IF"
      },
      "require": {
        "iffi": "0.x.x"
      },
      "description": "Accepts values on two ports and checks it against an if statement.",
      "title": "IF2",
      "ns": "utils",
      "name": "if2",
      "fn": "try {\n  if (iffi(input['in'], {\n    'value': input.value,\n    'compare': input.compare\n  })) {\n    output = {\n      yes: input.value\n    };\n  } else {\n    output = {\n      no: input.value\n    };\n  }\n} catch (e) {\n  output = {\n    error: e\n  };\n}\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "type": "any",
            "title": "Input",
            "description": "Input to be repeated",
            "readonly": true
          },
          "interval": {
            "type": "number",
            "title": "Interval",
            "description": "Interval in milliseconds",
            "format": "time",
            "required": true
          }
        },
        "output": {
          "out": {
            "type": "any",
            "title": "Output",
            "description": "Outputs the repeated input"
          }
        }
      },
      "expose": [
        "setInterval"
      ],
      "phrases": {
        "active": "Repeating input every {{input.interval}} milliseconds."
      },
      "description": "Repeats the input",
      "ns": "util",
      "name": "interval",
      "fn": "var inter = {\n  val: function (to, cb) {\n    setInterval(function () {\n      cb(input. in );\n    }, to)\n  }\n}\noutput = [inter, 'val', input.interval]\n"
    },
    {
      "ports": {
        "input": {
          "in1": {
            "type": "object",
            "title": "First Object",
            "required": true
          },
          "in2": {
            "type": "object",
            "title": "Second Object",
            "required": true
          }
        },
        "output": {
          "out": {
            "type": "object",
            "title": "Merged Object"
          }
        }
      },
      "phrases": {
        "active": "Merging objects together"
      },
      "description": "Merges two object together, note: overlapping keys will overwrite",
      "ns": "object",
      "name": "merge",
      "fn": "for(var key in input.in1) {\n  input.in2[key] = input.in1[key];\n}\n\noutput = {\n  out: input.in2\n}\n"
    },
    {
      "ports": {
        "input": {
          "name1": {
            "type": "string",
            "title": "First value's name",
            "required": true
          },
          "value1": {
            "type": "any",
            "title": "First value",
            "required": true
          },
          "name2": {
            "type": "string",
            "title": "Second value's name",
            "required": true
          },
          "value2": {
            "type": "any",
            "title": "Second value",
            "required": true
          }
        },
        "output": {
          "object": {
            "type": "object",
            "title": "Object"
          }
        }
      },
      "phrases": {
        "active": "Molding object from {{input.name1}} & {{input.name2}}"
      },
      "description": "Mold an object from two different inputs and name them",
      "ns": "object",
      "name": "mold",
      "fn": "var obj = {}\n\nobj[input.name1] = input.value1\nobj[input.name2] = input.value2\n\noutput = {\n  object: obj\n}\n"
    },
    {
      "ports": {
        "input": {
          "msg": {
            "type": "any",
            "title": "Log message",
            "required": true
          }
        },
        "output": {
          "msg": {
            "type": "any",
            "title": "Log Message"
          }
        }
      },
      "phrases": {
        "active": "{{input.msg}}"
      },
      "description": "Logs a message to the console (sync version). Use this to log system messages.",
      "ns": "console",
      "name": "msg",
      "fn": "console.log(input.msg)\noutput.msg = input.msg;\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "type": "any",
            "title": "Input",
            "description": "Input to be delayed",
            "readonly": true
          },
          "timeout": {
            "type": "number",
            "title": "Timeout",
            "description": "Timeout in milliseconds",
            "format": "time"
          }
        },
        "output": {
          "out": {
            "type": "any",
            "title": "Output",
            "description": "Outputs the delayed input"
          }
        }
      },
      "expose": [
        "setTimeout"
      ],
      "phrases": {
        "active": "Holding input for {{input.timeout}} milliseconds."
      },
      "description": "Holds the input for a while",
      "ns": "util",
      "name": "wait",
      "fn": "var cmd = child_process.spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', function (data) {\n  console.log('stdout: ' + data);\n});\n\nls.stderr.on('data', function (data) {\n  console.log('stderr: ' + data);\n});\n\nls.on('close', function (code) {\n  console.log('child process exited with code ' + code);\n});\n\n\noutput = [slow, 'down', input.timeout]\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "type": "boolean",
            "title": "A boolean"
          }
        },
        "output": {
          "yes": {
            "type": "boolean",
            "title": "Yes"
          },
          "no": {
            "type": "boolean",
            "title": "No"
          }
        }
      },
      "phrases": {
        "active": "Determining truth"
      },
      "description": "Whether the input is true or false",
      "ns": "conditional",
      "title": "true?",
      "name": "true",
      "fn": "output = {\n  yes: !! input. in ,\n  no: !input. in\n}\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "type": "any",
            "title": "Input",
            "description": "Input to be delayed",
            "readonly": true
          },
          "timeout": {
            "type": "number",
            "title": "Timeout",
            "description": "Timeout in milliseconds",
            "format": "time"
          }
        },
        "output": {
          "out": {
            "type": "any",
            "title": "Output",
            "description": "Outputs the delayed input"
          }
        }
      },
      "expose": [
        "setTimeout"
      ],
      "phrases": {
        "active": "Holding input for {{input.timeout}} milliseconds."
      },
      "description": "Holds the input for a while",
      "ns": "util",
      "name": "wait",
      "fn": "var slow = {\n  down: function (to, cb) {\n    setTimeout(function () {\n      cb(input. in );\n    }, to)\n  }\n}\noutput = [slow, 'down', input.timeout]\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "type": "any",
            "title": "Input",
            "description": "Input to be delayed",
            "readonly": true
          },
          "timeout": {
            "type": "number",
            "title": "Timeout",
            "description": "Timeout in milliseconds",
            "format": "time"
          }
        },
        "output": {
          "out": {
            "type": "any",
            "title": "Output",
            "description": "Outputs the delayed input"
          }
        }
      },
      "expose": [
        "setTimeout"
      ],
      "phrases": {
        "active": "Holding input for {{input.timeout}} milliseconds."
      },
      "description": "Holds the input for a while",
      "ns": "util",
      "name": "wait",
      "fn": "var slow = {\n  down: function (to, cb) {\n    setTimeout(function () {\n      cb(input. in );\n    }, to)\n  }\n}\noutput = [slow, 'down', input.timeout]\n"
    },
    {
      "ports": {
        "input": {
          "xml": {
            "type": "string",
            "format": "xml",
            "title": "XML"
          }
        },
        "output": {
          "error": {
            "type": "object",
            "title": "Error Object"
          },
          "result": {
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Converting XML to Object"
      },
      "require": {
        "xml2js": "0.x.x"
      },
      "description": "Simple XML to JavaScript object converter",
      "ns": "utils",
      "name": "xml2js",
      "fn": "output = [xml2js, 'parseString', input.xml]\n"
    }
  ],
  "twigs": []
}